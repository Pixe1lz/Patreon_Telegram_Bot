import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher import filters
from aiogram.utils import executor
import config

# Настройка логирования
logging.basicConfig(level=logging.INFO)

# Инициализация бота и диспетчера
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])  # Приветственное сообщение
async def main_message(message: types.Message):
    markup = types.InlineKeyboardMarkup()

    site_btn = types.InlineKeyboardButton("Сайт", url="https://пантеон.tech/")  # Ссылка на сайт
    servicelist_btn = types.InlineKeyboardButton("📋 Выбрать услугу", callback_data="servicelist_data")
    pricelist_btn = types.InlineKeyboardButton("💲 Цены", callback_data="pricelist_data")

    markup.row(servicelist_btn)
    markup.row(pricelist_btn)
    markup.row(site_btn)

    await message.answer(f"""
👋 <b>Добро пожаловать, <em>{message.from_user.username}</em>!</b>

🤖 Я — ваш цифровой помощник и часть команды агентства <b>Пантеон</b>.

<b>Кто мы такие?</b> 
👤 Группа единомышленников в виде адекватных и компетентных людей!
Такие люди мы:  
- Ценят своё и чужое время; 
- Не любим долгие переговоры и лишнюю бюрократию;
- Мы ценим свое и чужое время.

📌 <b>Услуги:</b>  
<em>3D-моделирование  •  Монтаж  •  Сайты  •  Мини-приложения  •  Боты</em>
""", parse_mode="HTML", reply_markup=markup)


async def message_list_services(chat_id):  # Список сервисов
    markup_services = types.InlineKeyboardMarkup()

    Animation_btn = types.InlineKeyboardButton("🎨 3D-анимация", callback_data='Animation_callback')
    VideoMontage_btn = types.InlineKeyboardButton("🎥 Видеомонтаж", callback_data='VideoMontage_callback')
    markup_services.row(Animation_btn, VideoMontage_btn)

    MiniApp_btn = types.InlineKeyboardButton("📱Мини-приложения", callback_data='MiniApp_callback')
    Web_btn = types.InlineKeyboardButton("🌐 Разработка сайтов", callback_data='Web_callback')
    markup_services.row(MiniApp_btn, Web_btn)

    Bots_btn = types.InlineKeyboardButton("🤖 Боты", callback_data='Bots_callback')
    Consultation_btn = types.InlineKeyboardButton("💬 Консультация", callback_data='Consultation_callback')
    markup_services.row(Bots_btn, Consultation_btn)

    main_btn = types.InlineKeyboardButton("Главное", callback_data='main_data')
    markup_services.row(main_btn)

    await bot.send_message(chat_id, """
💡<b>Какие задачи мы решаем для вас?</b>
    
<u>Список услуг</u>:
🍏 3D-анимации и 3D-модели
🍐 Видеомонтаж и Motion-дизайн
🍊 Разработка мини-приложений
🍓 Разработка сайтов под ключ
🍌 Разработка ботов
🍉 Консультация
    
⚡️<em>Узнай подробнее — нажми на нужную кнопку ниже!</em> ️
""", parse_mode='HTML', reply_markup=markup_services)


@dp.callback_query_handler(lambda callback: True)
async def callback_message(callback: types.CallbackQuery):
    markup_service = types.InlineKeyboardMarkup()

    helpContact_btn = types.InlineKeyboardButton("Связаться напрямую", callback_data="helpContact_data")
    btn_back = types.InlineKeyboardButton("Вернуться ⬅️", callback_data='back')  # Кнопка возврата

    if callback.data == "servicelist_data":  # Список сервисов
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await message_list_services(callback.message.chat.id)

    elif callback.data == 'VideoMontage_callback':
        brief_videomontage_btn = types.InlineKeyboardButton("📝 Заполнить бриф", callback_data="brief_videomontage_data")
        markup_service.row(brief_videomontage_btn)
        markup_service.row(helpContact_btn)
        markup_service.row(btn_back)

        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await bot.send_message(callback.message.chat.id, """
2️⃣ <b>Видеомонтаж и Motion-дизайн</b>

<b>Описание</b>:
Это очень скрупулёзная работа, в которой важно учитывать множество компонентов:

🎨 <b>Цветовая гамма</b>  
⚡️ <b>Динамичность</b>  
🔍 <b>Крупность планов</b> 
🎧 <b>Саунд-дизайн</b>  
🌀 <b>3D-объекты</b>  
✨ <b>Переходы</b>  
🎞️ <b>Подбор футажей</b> и многое другое.

Каждый элемент — ключ к созданию по-настоящему впечатляющего результата.
""", parse_mode='HTML', reply_markup=markup_service)

    elif callback.data == 'Animation_callback':
        brief_animaton_btn = types.InlineKeyboardButton("📝 Заполнить бриф", callback_data="brief_animation_data")
        markup_service.row(brief_animaton_btn)
        markup_service.row(helpContact_btn)
        markup_service.row(btn_back)

        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await bot.send_message(callback.message.chat.id, """
1️⃣ <b>3D-анимации и 3D-модели</b>

<b>Описание</b>:       
✨ Когда обычная графика перестаёт впечатлять — настало время оживить реальность.

Мы создаём <b>реалистичные</b> и <b>стилизованные 3D-модели</b>: от продуктов до персонажей, от архитектурных форм до фантастических миров.

🎬 А затем — вдохнём в них жизнь с помощью анимации.

Ваш продукт будет не просто показан — он станет понятным, запоминающимся и желанным.

✅ Идеально для рекламы, презентаций, метавселенных и многого другого.
""", parse_mode='HTML', reply_markup=markup_service)

    # Добавьте остальные обработчики для других кнопок аналогично

    elif callback.data == 'back':  # Вернуться к списку услуг
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await message_list_services(callback.message.chat.id)

    elif callback.data == "helpContact_data":
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback_help_contacts(callback.message)

    elif callback.data == "main_data":
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await main_message(callback.message)


async def callback_help_contacts(message: types.Message):
    markup_service = types.InlineKeyboardMarkup()

    btn_back = types.InlineKeyboardButton("Вернуться ⬅️", callback_data='back')  # Кнопка возврата
    markup_service.row(btn_back)

    await bot.send_message(message.chat.id, """
Если у вас возникли вопросы по услугам, не стесняйтесь обращаться!
    
👉 Пишите мне: <b>@Ibra0330</b>
""", parse_mode='HTML', reply_markup=markup_service)


@dp.message_handler()  # Обработчик неизвестного текста
async def unknown_message(message: types.Message):
    await message.answer("❌ Неизвестная команда, введите /start")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)  # Программа работала постоянно

